package KUSITMS.WITHUS.mock.repository;

import KUSITMS.WITHUS.domain.organization.organization.entity.Organization;
import KUSITMS.WITHUS.domain.organization.organization.repository.OrganizationRepository;
import KUSITMS.WITHUS.global.exception.CustomException;
import KUSITMS.WITHUS.global.exception.ErrorCode;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;

public class FakeOrganizationRepository implements OrganizationRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(1);
    private final List<Organization> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public Organization getById(Long id) {
        return data.stream()
                .filter(org -> org.getId().equals(id))
                .findFirst()
                .orElseThrow(() -> new CustomException(ErrorCode.ORGANIZATION_NOT_EXIST));
    }

    @Override
    public List<Organization> findAll() {
        return new ArrayList<>(data);
    }

    @Override
    public Organization save(Organization organization) {
        if (organization.getId() == null || organization.getId() == 0) {
            Long newId = autoGeneratedId.getAndIncrement();
            Organization newOrg = Organization.builder()
                    .id(newId)
                    .name(organization.getName())
                    .build();

            data.add(newOrg);
            return newOrg;
        } else {
            data.removeIf(o -> o.getId().equals(organization.getId()));
            data.add(organization);
            return organization;
        }
    }

    @Override
    public void delete(Long id) {
        data.removeIf(org -> org.getId().equals(id));
    }

    @Override
    public List<Organization> findByNameContaining(String keyword) {
        return data.stream()
                .filter(org -> org.getName() != null && org.getName().contains(keyword))
                .collect(Collectors.toList());
    }

    @Override
    public boolean existsByName(String name) {
        return data.stream()
                .anyMatch(org -> org.getName().equals(name));
    }
}
