package KUSITMS.WITHUS.mock.repository;

import KUSITMS.WITHUS.domain.user.user.entity.User;
import KUSITMS.WITHUS.domain.user.user.repository.UserRepository;
import KUSITMS.WITHUS.global.exception.CustomException;
import KUSITMS.WITHUS.global.exception.ErrorCode;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;

public class FakeUserRepository implements UserRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(1);
    private final List<User> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public Boolean existsByEmail(String email) {
        return data.stream().anyMatch(user -> user.getEmail().equals(email));
    }

    @Override
    public Boolean existsByPhoneNumber(String phoneNumber) {
        return data.stream().anyMatch(user -> user.getPhoneNumber().equals(phoneNumber));
    }

    @Override
    public User findByEmail(String email) {
        return data.stream()
                .filter(user -> user.getEmail().equals(email))
                .findFirst()
                .orElse(null);
    }

    @Override
    public User save(User user) {
        if (user.getId() == null || user.getId() == 0) {
            Long newId = autoGeneratedId.getAndIncrement();

            User newUser = User.builder()
                    .id(newId)
                    .email(user.getEmail())
                    .password(user.getPassword())
                    .name(user.getName())
                    .phoneNumber(user.getPhoneNumber())
                    .role(user.getRole())
                    .build();

            data.add(newUser);
            return newUser;
        } else {
            data.removeIf(u -> u.getId().equals(user.getId()));
            data.add(user);
            return user;
        }
    }

    @Override
    public User getById(Long id) {
        return data.stream()
                .filter(user -> user.getId().equals(id))
                .findFirst()
                .orElseThrow(() -> new CustomException(ErrorCode.USER_NOT_EXIST));
    }

    @Override
    public User getByEmail(String email) {
        return Optional.ofNullable(findByEmail(email))
                .orElseThrow(() -> new CustomException(ErrorCode.USER_NOT_EXIST));
    }

    @Override
    public List<User> findAllById(List<Long> userIds) {
        return data.stream()
                .filter(user -> userIds.contains(user.getId()))
                .collect(Collectors.toList());
    }
}
